// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // calculate zx
    Not(in=zx, out=zxRevert);
    And16(
        a=x, 
        b[0]=zxRevert,
        b[1]=zxRevert,
        b[2]=zxRevert,
        b[3]=zxRevert,
        b[4]=zxRevert,
        b[5]=zxRevert,
        b[6]=zxRevert,
        b[7]=zxRevert,
        b[8]=zxRevert,
        b[9]=zxRevert,
        b[10]=zxRevert,
        b[11]=zxRevert,
        b[12]=zxRevert,
        b[13]=zxRevert,
        b[14]=zxRevert,
        b[15]=zxRevert,
        out=xAfterZX
    );

    // calculate nx
    Xor1And16(a=nx, b=xAfterZX, out=xAfterNX);

    // calculate zy
    Not(in=zy, out=zyRevert);
    And16(
        a=y, 
        b[0]=zyRevert,
        b[1]=zyRevert,
        b[2]=zyRevert,
        b[3]=zyRevert,
        b[4]=zyRevert,
        b[5]=zyRevert,
        b[6]=zyRevert,
        b[7]=zyRevert,
        b[8]=zyRevert,
        b[9]=zyRevert,
        b[10]=zyRevert,
        b[11]=zyRevert,
        b[12]=zyRevert,
        b[13]=zyRevert,
        b[14]=zyRevert,
        b[15]=zyRevert,
        out=yAfterZY
    );

    // calculate ny
    Xor1And16(a=ny, b=yAfterZY, out=yAfterNY);

    // calculate f
    And16(a=xAfterNX, b=yAfterNY, out=outAfterAdd);
    Or16(a=xAfterNX, b=yAfterNY, out=outAfterOr);
    And16(
        a=outAfterOr, 
        b[0]=f,
        b[1]=f,
        b[2]=f,
        b[3]=f,
        b[4]=f,
        b[5]=f,
        b[6]=f,
        b[7]=f,
        b[8]=f,
        b[9]=f,
        b[10]=f,
        b[11]=f,
        b[12]=f,
        b[13]=f,
        b[14]=f,
        b[15]=f,
        out=outAfterOr1
    );
    Add16(a=outAfterOr1, b=outAfterAdd, out=outAfterF);

    // calculate no
    Xor1And16(a=no, b=outAfterF, out=out);
    Xor1And16(a=no, b=outAfterF, out=outTmp);

    // calculate zr
    Or16Way(in=outTmp, out=out16);
    Not(in=out16, out=zr);

    // calculate ng
    And16(
        a=outTmp, 
        b[0]=false,
        b[1]=false,
        b[2]=false,
        b[3]=false,
        b[4]=false,
        b[5]=false,
        b[6]=false,
        b[7]=false,
        b[8]=false,
        b[9]=false,
        b[10]=false,
        b[11]=false,
        b[12]=false,
        b[13]=false,
        b[14]=false,
        b[15]=true,
        out=ngTmp);
    Or16Way(in=ngTmp, out=ng);
}