class LinkList {
    field Node head;
    field Node tail;
    field int length;

    constructor LinkList new() {
        do createHeadTail();
        return this;
    }

    method Node getTail(){
        return tail;
    }

    method void createHeadTail() {
        var Node headNode, tailNode;
        
        let headNode = Node.new(0);
        let tailNode = Node.new(0);
        
        do headNode.setNext(tailNode);
        do tailNode.setPrev(headNode);

        let head = headNode;
        let tail = tailNode;

        let length = 0;
        return;
    }

    method void append(char data) {
        var Node newNode, oldTailPrev;

        let newNode = Node.new(data);

        let oldTailPrev = tail.getPrev();

        do tail.setPrev(newNode);
        do newNode.setNext(tail);
        do oldTailPrev.setNext(newNode);
        do newNode.setPrev(oldTailPrev);

        let length = length + 1;

        return;
    }

    method void log() {
        var Node current;

        do Output.moveCursor(0, 0);
        do Output.printString("from head to tail  ");
        do Output.printInt(length);
        do Output.printString(" nodes  ");
        
        let current = head;

        while (~(current = null)) {
            do Output.printChar(current.getData());
            do Output.printString(" => ");
            let current = current.getNext();
        }

        return;
    }

    method void clear() {
        var Node current, next;
        let current = head;
        while (~(current = null)) {
            let next = current.getNext();
            do current.dispose();
            let current = next;
        }
        do createHeadTail();
        return;
    }
}