class LinkList {
    field Node head;
    field Node tail;
    field int length;

    constructor LinkList new() {
        do createHeadAndTail();
        return this;
    }

    method Node getTail(){
        return tail;
    }

    method Node getHead(){
        return head;
    }

    method void createHeadAndTail() {
        var Node headNode, tailNode;
        
        let headNode = Node.new(null);
        let tailNode = Node.new(null);
        
        do headNode.setNext(tailNode);
        do tailNode.setPrev(headNode);

        let head = headNode;
        let tail = tailNode;

        let length = 0;
        return;
    }
    
    method void pushTail(char data) {
        var Node newNode, oldTailPrev;

        let newNode = Node.new(data);

        let oldTailPrev = tail.getPrev();

        do tail.setPrev(newNode);
        do newNode.setNext(tail);
        do oldTailPrev.setNext(newNode);
        do newNode.setPrev(oldTailPrev);

        let length = length + 1;

        return;
    }

    method char popTail() {
        var Node tailPrev, tailPrevPrev;
        var char poped;
        if (length = 0) {
            return null;
        }

        let tailPrev = tail.getPrev();
        let tailPrevPrev = tailPrev.getPrev();
        do tailPrevPrev.setNext(tail);
        do tail.setPrev(tailPrevPrev);
        let poped = tailPrev.getData();
        do tailPrev.dispose();
        let length = length + 1;
        return poped;
    }

    method Node getNodeByIndex(int index) {
        var Node current;
        var int i;
        if (~(index < length)) {
            return null;
        }
        let i = 0;
        let current = head;
        while(~(current.getNext() = null)){
            let current = current.getNext();
            if (i = index){
                return current;
            }else{
                let i = i + 1;
            }
        }
        return current;
    }

    method char getNodeValueByIndex(int index){
        var Node current;
        let current = getNodeByIndex(index);
        return current.getData();
    }

    method void removeNodeByIndex(int index) {
        var Node willRemoved, willRemovedPrev, willRemovedNext;

        if (~(index < length)) {
            return;
        }

        let willRemoved = getNodeByIndex(index);
        let willRemovedPrev = willRemoved.getPrev();
        let willRemovedNext = willRemoved.getNext();

        do willRemovedPrev.setNext(willRemovedNext);
        do willRemovedNext.setPrev(willRemovedPrev);

        do willRemoved.dispose();

        let length = length - 1;

        return;
    }

    method void replaceData(int index, char newData) {
        var Node current;

        let current = getNodeByIndex(index);
        do current.setData(newData);

        return;
    }

    method int getLength(){
        return length;
    }

    method void clear() {
        var Node current, next;
        let current = head;
        while (~(current = null)) {
            let next = current.getNext();
            do current.dispose();
            let current = next;
        }
        do createHeadAndTail();
        return;
    }

    method void log(boolean printInt) {
        var Node current;

        do Output.moveCursor(0, 0);
        do Output.printInt(length);
        do Output.printString(" nodes ");
        
        let current = head;

        while (~(current = null)) {
            if (printInt) {
                do Output.printInt(current.getData());
            }else{
                do Output.printChar(current.getData());
            }
            do Output.printString(" => ");
            let current = current.getNext();
        }

        return;
    }
}